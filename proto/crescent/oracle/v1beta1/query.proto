syntax = "proto3";
package crescent.oracle.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "crescent/oracle/v1beta1/oracle.proto";
import "crescent/oracle/v1beta1/genesis.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/crescent-network/crescent/v5/x/oracle/types";

option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // Pricess returns exchange rates of all denoms,
  // or, if specified, returns a single denom
  rpc PriceOracle(QueryPriceOracle) returns (QueryPriceOracleResponse) {
    option (google.api.http).get = "/crescent/oracle/v1beta1/price_oracle";
  }

  // MissCounter returns oracle miss counter of a validator
  rpc MissCounter(QueryMissCounter) returns (QueryMissCounterResponse) {
    option (google.api.http).get = "/crescent/oracle/v1beta1/miss";
  }

  // AggregatePrevotes returns aggregate prevotes of all validators
  rpc Prevotes(QueryPrevotes) returns (QueryPrevotesResponse) {
    option (google.api.http).get = "/crescent/oracle/v1beta1/prevotes";
  }

  // AggregateVote returns an aggregate vote of a validator
  rpc Votes(QueryVotes) returns (QueryVotesResponse) {
    option (google.api.http).get = "/crescent/oracle/v1beta1/votes";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/crescent/oracle/v1beta1/params";
  }
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryPriceOracle {}

message QueryPriceOracleResponse {
  // exchange_rates defines a list of the exchange rate for all whitelisted
  // denoms.
  repeated OraclePrice price_oracle = 1
    [(gogoproto.castrepeated) = "OraclePrices", (gogoproto.nullable) = false];
}


// QueryMissCounter is the request type for the Query/MissCounter RPC
// method.
message QueryMissCounter {}

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
message QueryMissCounterResponse {
  // miss_counter defines the oracle miss counter of a validator
  repeated MissCounter miss_counter = 1
  [(gogoproto.castrepeated) = "MissCounters", (gogoproto.nullable) = false];  
}

message QueryPrevotes {}

// QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
message QueryPrevotesResponse {
  repeated PricePrevote prevotes = 1
  [(gogoproto.castrepeated) = "PricePrevotes", (gogoproto.nullable) = false];  
}

// QueryAggregatePrevotes is the request type for the
// Query/AggregatePrevotes RPC method.
message QueryVotes {}

// QueryAggregatePrevotesResponse is response type for the
// Query/AggregatePrevotes RPC method.
message QueryVotesResponse {
  // aggregate_prevotes defines all oracle aggregate prevotes submitted in the
  // current vote period
  repeated PriceVote votes = 1
  [(gogoproto.castrepeated) = "PriceVotes", (gogoproto.nullable) = false];  
}
