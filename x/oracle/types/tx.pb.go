// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/oracle/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPricesPrevote struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Feeder string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
}

func (m *MsgPricesPrevote) Reset()         { *m = MsgPricesPrevote{} }
func (m *MsgPricesPrevote) String() string { return proto.CompactTextString(m) }
func (*MsgPricesPrevote) ProtoMessage()    {}
func (*MsgPricesPrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{0}
}
func (m *MsgPricesPrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPricesPrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPricesPrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPricesPrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPricesPrevote.Merge(m, src)
}
func (m *MsgPricesPrevote) XXX_Size() int {
	return m.Size()
}
func (m *MsgPricesPrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPricesPrevote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPricesPrevote proto.InternalMessageInfo

type MsgPricesPrevoteResponse struct {
}

func (m *MsgPricesPrevoteResponse) Reset()         { *m = MsgPricesPrevoteResponse{} }
func (m *MsgPricesPrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPricesPrevoteResponse) ProtoMessage()    {}
func (*MsgPricesPrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{1}
}
func (m *MsgPricesPrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPricesPrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPricesPrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPricesPrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPricesPrevoteResponse.Merge(m, src)
}
func (m *MsgPricesPrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPricesPrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPricesPrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPricesPrevoteResponse proto.InternalMessageInfo

type MsgPricesVote struct {
	Salt        string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Feeder      string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
	PriceTuples string `protobuf:"bytes,3,opt,name=price_tuples,json=priceTuples,proto3" json:"price_tuples,omitempty"`
}

func (m *MsgPricesVote) Reset()         { *m = MsgPricesVote{} }
func (m *MsgPricesVote) String() string { return proto.CompactTextString(m) }
func (*MsgPricesVote) ProtoMessage()    {}
func (*MsgPricesVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{2}
}
func (m *MsgPricesVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPricesVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPricesVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPricesVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPricesVote.Merge(m, src)
}
func (m *MsgPricesVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgPricesVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPricesVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPricesVote proto.InternalMessageInfo

type MsgPricesVoteResponse struct {
}

func (m *MsgPricesVoteResponse) Reset()         { *m = MsgPricesVoteResponse{} }
func (m *MsgPricesVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPricesVoteResponse) ProtoMessage()    {}
func (*MsgPricesVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{3}
}
func (m *MsgPricesVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPricesVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPricesVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPricesVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPricesVoteResponse.Merge(m, src)
}
func (m *MsgPricesVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPricesVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPricesVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPricesVoteResponse proto.InternalMessageInfo

type MsgLsvFeederUpdate struct {
	LsvAccAddr string `protobuf:"bytes,1,opt,name=lsvAccAddr,proto3" json:"lsvAccAddr,omitempty"`
	Feeder     string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
}

func (m *MsgLsvFeederUpdate) Reset()         { *m = MsgLsvFeederUpdate{} }
func (m *MsgLsvFeederUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgLsvFeederUpdate) ProtoMessage()    {}
func (*MsgLsvFeederUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{4}
}
func (m *MsgLsvFeederUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLsvFeederUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLsvFeederUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLsvFeederUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLsvFeederUpdate.Merge(m, src)
}
func (m *MsgLsvFeederUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgLsvFeederUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLsvFeederUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLsvFeederUpdate proto.InternalMessageInfo

type MsgLsvFeederUpdateResponse struct {
}

func (m *MsgLsvFeederUpdateResponse) Reset()         { *m = MsgLsvFeederUpdateResponse{} }
func (m *MsgLsvFeederUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLsvFeederUpdateResponse) ProtoMessage()    {}
func (*MsgLsvFeederUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{5}
}
func (m *MsgLsvFeederUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLsvFeederUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLsvFeederUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLsvFeederUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLsvFeederUpdateResponse.Merge(m, src)
}
func (m *MsgLsvFeederUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLsvFeederUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLsvFeederUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLsvFeederUpdateResponse proto.InternalMessageInfo

type MsgAddNewTicker struct {
	DelegateAddress string `protobuf:"bytes,1,opt,name=delegateAddress,proto3" json:"delegateAddress,omitempty"`
	Ticker          string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (m *MsgAddNewTicker) Reset()         { *m = MsgAddNewTicker{} }
func (m *MsgAddNewTicker) String() string { return proto.CompactTextString(m) }
func (*MsgAddNewTicker) ProtoMessage()    {}
func (*MsgAddNewTicker) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{6}
}
func (m *MsgAddNewTicker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddNewTicker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddNewTicker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddNewTicker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddNewTicker.Merge(m, src)
}
func (m *MsgAddNewTicker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddNewTicker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddNewTicker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddNewTicker proto.InternalMessageInfo

type MsgAddNewTickerResponse struct {
}

func (m *MsgAddNewTickerResponse) Reset()         { *m = MsgAddNewTickerResponse{} }
func (m *MsgAddNewTickerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddNewTickerResponse) ProtoMessage()    {}
func (*MsgAddNewTickerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9828bacc6c6abf, []int{7}
}
func (m *MsgAddNewTickerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddNewTickerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddNewTickerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddNewTickerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddNewTickerResponse.Merge(m, src)
}
func (m *MsgAddNewTickerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddNewTickerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddNewTickerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddNewTickerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPricesPrevote)(nil), "crescent.oracle.v1beta1.MsgPricesPrevote")
	proto.RegisterType((*MsgPricesPrevoteResponse)(nil), "crescent.oracle.v1beta1.MsgPricesPrevoteResponse")
	proto.RegisterType((*MsgPricesVote)(nil), "crescent.oracle.v1beta1.MsgPricesVote")
	proto.RegisterType((*MsgPricesVoteResponse)(nil), "crescent.oracle.v1beta1.MsgPricesVoteResponse")
	proto.RegisterType((*MsgLsvFeederUpdate)(nil), "crescent.oracle.v1beta1.MsgLsvFeederUpdate")
	proto.RegisterType((*MsgLsvFeederUpdateResponse)(nil), "crescent.oracle.v1beta1.MsgLsvFeederUpdateResponse")
	proto.RegisterType((*MsgAddNewTicker)(nil), "crescent.oracle.v1beta1.MsgAddNewTicker")
	proto.RegisterType((*MsgAddNewTickerResponse)(nil), "crescent.oracle.v1beta1.MsgAddNewTickerResponse")
}

func init() { proto.RegisterFile("crescent/oracle/v1beta1/tx.proto", fileDescriptor_2f9828bacc6c6abf) }

var fileDescriptor_2f9828bacc6c6abf = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x82, 0x2a, 0x31, 0xb4, 0x0a, 0x5a, 0x01, 0x09, 0x16, 0xb2, 0x8a, 0x85, 0x50,
	0x11, 0xc2, 0x26, 0x54, 0x70, 0x44, 0x0a, 0x07, 0x4e, 0x0d, 0xaa, 0x4a, 0xe0, 0xc0, 0x01, 0xe4,
	0xec, 0x0e, 0x9b, 0x50, 0x37, 0x6b, 0xed, 0x6c, 0xdd, 0xf2, 0x16, 0xbc, 0x0f, 0x2f, 0xd0, 0x63,
	0x8f, 0x1c, 0x21, 0x79, 0x11, 0xe4, 0x8d, 0xd7, 0x4a, 0x8c, 0x5c, 0xc2, 0x6d, 0x76, 0xf6, 0x9b,
	0xef, 0x4f, 0x34, 0x5e, 0xd8, 0xe5, 0x1a, 0x89, 0xe3, 0xcc, 0xc4, 0x4a, 0x27, 0x3c, 0xc5, 0x38,
	0xef, 0x8f, 0xd1, 0x24, 0xfd, 0xd8, 0x9c, 0x47, 0x99, 0x56, 0x46, 0xb1, 0xae, 0x23, 0xa2, 0x25,
	0x11, 0x95, 0x84, 0x7f, 0x5b, 0x2a, 0xa9, 0x2c, 0x13, 0x17, 0xd5, 0x12, 0xf7, 0x1f, 0x36, 0x09,
	0xcb, 0x69, 0x4b, 0x85, 0xaf, 0xe0, 0xd6, 0x90, 0xe4, 0xa1, 0x9e, 0x72, 0xa4, 0x43, 0x8d, 0xb9,
	0x32, 0xc8, 0x18, 0x5c, 0x9f, 0x24, 0x34, 0xe9, 0x79, 0xbb, 0xde, 0xde, 0x8d, 0x23, 0x5b, 0xb3,
	0xbb, 0xb0, 0xf5, 0x05, 0x51, 0xa0, 0xee, 0x5d, 0xb3, 0xdd, 0xf2, 0x14, 0xfa, 0xd0, 0xab, 0xcf,
	0x1f, 0x21, 0x65, 0x6a, 0x46, 0x18, 0x7e, 0x82, 0x9d, 0xea, 0xee, 0x43, 0x29, 0xa6, 0x24, 0x35,
	0x4e, 0x5c, 0xd4, 0x4d, 0x62, 0xf6, 0x00, 0xb6, 0xb3, 0x62, 0xf2, 0xb3, 0x39, 0xcd, 0x52, 0xa4,
	0x5e, 0xdb, 0xde, 0xde, 0xb4, 0xbd, 0x91, 0x6d, 0x85, 0x5d, 0xb8, 0xb3, 0xe6, 0xaf, 0x82, 0x0f,
	0x80, 0x0d, 0x49, 0x1e, 0x50, 0xfe, 0xc6, 0xba, 0xde, 0x67, 0x22, 0x31, 0xc8, 0x02, 0x80, 0x94,
	0xf2, 0x01, 0xe7, 0x03, 0x21, 0x74, 0xf9, 0x1b, 0x56, 0x3a, 0x8d, 0x7f, 0xf1, 0x3e, 0xf8, 0x7f,
	0xdb, 0xaa, 0xac, 0x77, 0xd0, 0x19, 0x92, 0x1c, 0x08, 0xf1, 0x16, 0xcf, 0x46, 0x53, 0x7e, 0x8c,
	0x9a, 0xed, 0x41, 0x47, 0x60, 0x8a, 0x32, 0x31, 0x58, 0x88, 0x91, 0xa8, 0x4c, 0xab, 0xb7, 0x8b,
	0x48, 0x63, 0x67, 0x5c, 0xe4, 0xf2, 0x14, 0xde, 0x83, 0x6e, 0x4d, 0xea, 0xf2, 0x9e, 0xff, 0x68,
	0x43, 0x7b, 0x48, 0x92, 0x9d, 0xc0, 0xce, 0xfa, 0xd6, 0x1e, 0x47, 0x0d, 0xdf, 0x47, 0x54, 0x5f,
	0x90, 0xdf, 0xdf, 0x18, 0x75, 0xb1, 0x4c, 0x00, 0xac, 0x2c, 0xf2, 0xd1, 0xbf, 0x05, 0x05, 0xe7,
	0x47, 0x9b, 0x71, 0x55, 0x0a, 0x41, 0xa7, 0xbe, 0xb5, 0x27, 0x57, 0x29, 0x6a, 0xb0, 0xbf, 0xff,
	0x1f, 0x70, 0x15, 0xfa, 0x15, 0xb6, 0xd7, 0xd7, 0x77, 0x95, 0x64, 0x95, 0xf4, 0x9f, 0x6d, 0x4a,
	0xba, 0xac, 0xd7, 0xa3, 0x8b, 0xdf, 0x41, 0xeb, 0x62, 0x1e, 0x78, 0x97, 0xf3, 0xc0, 0xfb, 0x35,
	0x0f, 0xbc, 0xef, 0x8b, 0xa0, 0x75, 0xb9, 0x08, 0x5a, 0x3f, 0x17, 0x41, 0xeb, 0xe3, 0x4b, 0x39,
	0x35, 0x93, 0xd3, 0x71, 0xc4, 0xd5, 0x49, 0xec, 0xcc, 0x4f, 0x67, 0x68, 0xce, 0x94, 0x3e, 0xae,
	0x1a, 0x71, 0xfe, 0x22, 0x3e, 0x77, 0x6f, 0xda, 0x7c, 0xcb, 0x90, 0xc6, 0x5b, 0xf6, 0x2d, 0xef,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x49, 0x7e, 0xb5, 0x44, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PricesPrevote(ctx context.Context, in *MsgPricesPrevote, opts ...grpc.CallOption) (*MsgPricesPrevoteResponse, error)
	PricesVote(ctx context.Context, in *MsgPricesVote, opts ...grpc.CallOption) (*MsgPricesVoteResponse, error)
	LsvFeederUpdate(ctx context.Context, in *MsgLsvFeederUpdate, opts ...grpc.CallOption) (*MsgLsvFeederUpdateResponse, error)
	AddNewTicker(ctx context.Context, in *MsgAddNewTicker, opts ...grpc.CallOption) (*MsgAddNewTickerResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PricesPrevote(ctx context.Context, in *MsgPricesPrevote, opts ...grpc.CallOption) (*MsgPricesPrevoteResponse, error) {
	out := new(MsgPricesPrevoteResponse)
	err := c.cc.Invoke(ctx, "/crescent.oracle.v1beta1.Msg/PricesPrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PricesVote(ctx context.Context, in *MsgPricesVote, opts ...grpc.CallOption) (*MsgPricesVoteResponse, error) {
	out := new(MsgPricesVoteResponse)
	err := c.cc.Invoke(ctx, "/crescent.oracle.v1beta1.Msg/PricesVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LsvFeederUpdate(ctx context.Context, in *MsgLsvFeederUpdate, opts ...grpc.CallOption) (*MsgLsvFeederUpdateResponse, error) {
	out := new(MsgLsvFeederUpdateResponse)
	err := c.cc.Invoke(ctx, "/crescent.oracle.v1beta1.Msg/LsvFeederUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddNewTicker(ctx context.Context, in *MsgAddNewTicker, opts ...grpc.CallOption) (*MsgAddNewTickerResponse, error) {
	out := new(MsgAddNewTickerResponse)
	err := c.cc.Invoke(ctx, "/crescent.oracle.v1beta1.Msg/AddNewTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PricesPrevote(context.Context, *MsgPricesPrevote) (*MsgPricesPrevoteResponse, error)
	PricesVote(context.Context, *MsgPricesVote) (*MsgPricesVoteResponse, error)
	LsvFeederUpdate(context.Context, *MsgLsvFeederUpdate) (*MsgLsvFeederUpdateResponse, error)
	AddNewTicker(context.Context, *MsgAddNewTicker) (*MsgAddNewTickerResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PricesPrevote(ctx context.Context, req *MsgPricesPrevote) (*MsgPricesPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PricesPrevote not implemented")
}
func (*UnimplementedMsgServer) PricesVote(ctx context.Context, req *MsgPricesVote) (*MsgPricesVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PricesVote not implemented")
}
func (*UnimplementedMsgServer) LsvFeederUpdate(ctx context.Context, req *MsgLsvFeederUpdate) (*MsgLsvFeederUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LsvFeederUpdate not implemented")
}
func (*UnimplementedMsgServer) AddNewTicker(ctx context.Context, req *MsgAddNewTicker) (*MsgAddNewTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewTicker not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PricesPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPricesPrevote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PricesPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.oracle.v1beta1.Msg/PricesPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PricesPrevote(ctx, req.(*MsgPricesPrevote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PricesVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPricesVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PricesVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.oracle.v1beta1.Msg/PricesVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PricesVote(ctx, req.(*MsgPricesVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LsvFeederUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLsvFeederUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LsvFeederUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.oracle.v1beta1.Msg/LsvFeederUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LsvFeederUpdate(ctx, req.(*MsgLsvFeederUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddNewTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddNewTicker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddNewTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.oracle.v1beta1.Msg/AddNewTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddNewTicker(ctx, req.(*MsgAddNewTicker))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crescent.oracle.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PricesPrevote",
			Handler:    _Msg_PricesPrevote_Handler,
		},
		{
			MethodName: "PricesVote",
			Handler:    _Msg_PricesVote_Handler,
		},
		{
			MethodName: "LsvFeederUpdate",
			Handler:    _Msg_LsvFeederUpdate_Handler,
		},
		{
			MethodName: "AddNewTicker",
			Handler:    _Msg_AddNewTicker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crescent/oracle/v1beta1/tx.proto",
}

func (m *MsgPricesPrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPricesPrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPricesPrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPricesPrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPricesPrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPricesPrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPricesVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPricesVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPricesVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceTuples) > 0 {
		i -= len(m.PriceTuples)
		copy(dAtA[i:], m.PriceTuples)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PriceTuples)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPricesVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPricesVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPricesVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLsvFeederUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLsvFeederUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLsvFeederUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LsvAccAddr) > 0 {
		i -= len(m.LsvAccAddr)
		copy(dAtA[i:], m.LsvAccAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LsvAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLsvFeederUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLsvFeederUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLsvFeederUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddNewTicker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddNewTicker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddNewTicker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegateAddress) > 0 {
		i -= len(m.DelegateAddress)
		copy(dAtA[i:], m.DelegateAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegateAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddNewTickerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddNewTickerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddNewTickerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPricesPrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPricesPrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPricesVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PriceTuples)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPricesVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLsvFeederUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LsvAccAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLsvFeederUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddNewTicker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegateAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddNewTickerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPricesPrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPricesPrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPricesPrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPricesPrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPricesPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPricesPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPricesVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPricesVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPricesVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTuples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceTuples = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPricesVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPricesVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPricesVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLsvFeederUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLsvFeederUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLsvFeederUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsvAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LsvAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLsvFeederUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLsvFeederUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLsvFeederUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddNewTicker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddNewTicker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddNewTicker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddNewTickerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddNewTickerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddNewTickerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
