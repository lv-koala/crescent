// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/oracle/v1beta1/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the liquidity module.
type Params struct {
	// minimum number of votes to decide a price
	VoteMinTx uint64 `protobuf:"varint,1,opt,name=vote_min_tx,json=voteMinTx,proto3" json:"vote_min_tx,omitempty"`
	// distribution rate of reward from the module account
	RewardDistributionRate   uint64 `protobuf:"varint,2,opt,name=reward_distribution_rate,json=rewardDistributionRate,proto3" json:"reward_distribution_rate,omitempty"`
	RewardDistributionPeriod uint64 `protobuf:"varint,3,opt,name=reward_distribution_period,json=rewardDistributionPeriod,proto3" json:"reward_distribution_period,omitempty"`
	// list of whitelisted feeder addresses
	WhitelistFeeders []string `protobuf:"bytes,4,rep,name=whitelist_feeders,json=whitelistFeeders,proto3" json:"whitelist_feeders,omitempty"`
	// list of delegate_account
	// The delegate Account is changed by gov, and delegate account can add a new symbol.
	DelegateAccounts []string `protobuf:"bytes,5,rep,name=delegate_accounts,json=delegateAccounts,proto3" json:"delegate_accounts,omitempty"`
	// list of acceptable ticker. uppercase and _ only
	AcceptTickers []string `protobuf:"bytes,6,rep,name=accept_tickers,json=acceptTickers,proto3" json:"accept_tickers,omitempty"`
	// threshold for acceptable seconds between the current block time and the timestamp of the price
	// should be more than 2 block. check at msg handler
	AcceptableSeconds uint64 `protobuf:"varint,7,opt,name=acceptable_seconds,json=acceptableSeconds,proto3" json:"acceptable_seconds,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55c1e1dfd1b1077, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// PriceTuple
type PriceTuple struct {
	SourceExchangeId uint64 `protobuf:"varint,1,opt,name=source_exchange_id,json=sourceExchangeId,proto3" json:"source_exchange_id,omitempty"`
	//google.protobuf.Timestamp        timestamp           = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
	Timestamp uint64                                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ticker    string                                 `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	UsdPrice  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
}

func (m *PriceTuple) Reset()         { *m = PriceTuple{} }
func (m *PriceTuple) String() string { return proto.CompactTextString(m) }
func (*PriceTuple) ProtoMessage()    {}
func (*PriceTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55c1e1dfd1b1077, []int{1}
}
func (m *PriceTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceTuple.Merge(m, src)
}
func (m *PriceTuple) XXX_Size() int {
	return m.Size()
}
func (m *PriceTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceTuple.DiscardUnknown(m)
}

var xxx_messageInfo_PriceTuple proto.InternalMessageInfo

type ValidPriceTuple struct {
	SourceExchangeId uint64                                 `protobuf:"varint,1,opt,name=source_exchange_id,json=sourceExchangeId,proto3" json:"source_exchange_id,omitempty"`
	Feeder           string                                 `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
	UsdPrice         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
}

func (m *ValidPriceTuple) Reset()         { *m = ValidPriceTuple{} }
func (m *ValidPriceTuple) String() string { return proto.CompactTextString(m) }
func (*ValidPriceTuple) ProtoMessage()    {}
func (*ValidPriceTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55c1e1dfd1b1077, []int{2}
}
func (m *ValidPriceTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidPriceTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidPriceTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidPriceTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidPriceTuple.Merge(m, src)
}
func (m *ValidPriceTuple) XXX_Size() int {
	return m.Size()
}
func (m *ValidPriceTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidPriceTuple.DiscardUnknown(m)
}

var xxx_messageInfo_ValidPriceTuple proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "crescent.oracle.v1beta1.Params")
	proto.RegisterType((*PriceTuple)(nil), "crescent.oracle.v1beta1.PriceTuple")
	proto.RegisterType((*ValidPriceTuple)(nil), "crescent.oracle.v1beta1.ValidPriceTuple")
}

func init() {
	proto.RegisterFile("crescent/oracle/v1beta1/oracle.proto", fileDescriptor_f55c1e1dfd1b1077)
}

var fileDescriptor_f55c1e1dfd1b1077 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x3b, 0xdb, 0x5a, 0x9d, 0x88, 0xba, 0x1b, 0xa4, 0x0e, 0x8b, 0xcc, 0x2e, 0x45, 0x65,
	0x41, 0xdb, 0x61, 0x11, 0xc5, 0x83, 0x17, 0x97, 0x55, 0x10, 0x11, 0xca, 0x58, 0x3c, 0x78, 0x09,
	0x69, 0xf2, 0x6c, 0x43, 0x67, 0x26, 0x43, 0x92, 0x69, 0xeb, 0xb7, 0xf0, 0x43, 0xf8, 0x35, 0xbc,
	0xf7, 0xd8, 0xa3, 0x78, 0x58, 0xb4, 0xfd, 0x22, 0x32, 0x49, 0xba, 0xbb, 0xa2, 0x27, 0x3d, 0xb5,
	0xef, 0xff, 0xfb, 0xbf, 0xe4, 0x9f, 0x37, 0x3c, 0x74, 0x8f, 0x29, 0xd0, 0x0c, 0x0a, 0x93, 0x48,
	0x45, 0x59, 0x06, 0xc9, 0xec, 0x78, 0x04, 0x86, 0x1e, 0xfb, 0xb2, 0x5f, 0x2a, 0x69, 0x24, 0xbe,
	0xb3, 0x75, 0xf5, 0xbd, 0xec, 0x5d, 0xfb, 0xb7, 0xc7, 0x72, 0x2c, 0xad, 0x27, 0xa9, 0xff, 0x39,
	0x7b, 0x77, 0xb5, 0x83, 0xda, 0x03, 0xaa, 0x68, 0xae, 0x71, 0x8c, 0xae, 0xcf, 0xa4, 0x01, 0x92,
	0x8b, 0x82, 0x98, 0x45, 0x14, 0x1c, 0x06, 0x47, 0xad, 0x34, 0xac, 0xa5, 0xb7, 0xa2, 0x18, 0x2e,
	0xf0, 0x33, 0x14, 0x29, 0x98, 0x53, 0xc5, 0x09, 0x17, 0xda, 0x28, 0x31, 0xaa, 0x8c, 0x90, 0x05,
	0x51, 0xd4, 0x40, 0xb4, 0x63, 0xcd, 0x1d, 0xc7, 0x4f, 0x2f, 0xe1, 0x94, 0x1a, 0xc0, 0xcf, 0xd1,
	0xfe, 0xdf, 0x3a, 0x4b, 0x50, 0x42, 0xf2, 0xa8, 0x69, 0x7b, 0xa3, 0x3f, 0x7b, 0x07, 0x96, 0xe3,
	0x87, 0x68, 0x6f, 0x3e, 0x11, 0x06, 0x32, 0xa1, 0x0d, 0xf9, 0x08, 0xc0, 0x41, 0xe9, 0xa8, 0x75,
	0xd8, 0x3c, 0x0a, 0xd3, 0xdd, 0x73, 0xf0, 0xca, 0xe9, 0xb5, 0x99, 0x43, 0x06, 0x63, 0x6a, 0x80,
	0x50, 0xc6, 0x64, 0x55, 0x18, 0x1d, 0x5d, 0x71, 0xe6, 0x2d, 0x78, 0xe1, 0x75, 0x7c, 0x1f, 0xdd,
	0xa4, 0x8c, 0x41, 0x69, 0x88, 0x11, 0x6c, 0x5a, 0x1f, 0xdb, 0xb6, 0xce, 0x1b, 0x4e, 0x1d, 0x3a,
	0x11, 0xf7, 0x10, 0x76, 0x02, 0x1d, 0x65, 0x40, 0x34, 0x30, 0x59, 0x70, 0x1d, 0x5d, 0xb5, 0xb1,
	0xf7, 0x2e, 0xc8, 0x3b, 0x07, 0xba, 0x5f, 0x03, 0x84, 0x06, 0x4a, 0x30, 0x18, 0x56, 0x65, 0x06,
	0xf8, 0x11, 0xc2, 0x5a, 0x56, 0x8a, 0x01, 0x81, 0x05, 0x9b, 0xd0, 0x62, 0x0c, 0x44, 0x70, 0x3f,
	0xdd, 0x5d, 0x47, 0x5e, 0x7a, 0xf0, 0x9a, 0xe3, 0xbb, 0x28, 0x34, 0x22, 0x07, 0x6d, 0x68, 0x5e,
	0xfa, 0xa9, 0x5e, 0x08, 0xb8, 0x83, 0xda, 0x2e, 0xa9, 0x1d, 0x5a, 0x98, 0xfa, 0x0a, 0xbf, 0x41,
	0x61, 0xa5, 0x39, 0x29, 0xeb, 0x5b, 0xa3, 0x56, 0x8d, 0x4e, 0xfa, 0xcb, 0xb3, 0x83, 0xc6, 0xf7,
	0xb3, 0x83, 0x07, 0x63, 0x61, 0x26, 0xd5, 0xa8, 0xcf, 0x64, 0x9e, 0x30, 0xa9, 0x73, 0xa9, 0xfd,
	0x4f, 0x4f, 0xf3, 0x69, 0x62, 0x3e, 0x95, 0xa0, 0xfb, 0xa7, 0xc0, 0xd2, 0x6b, 0x95, 0xe6, 0x36,
	0x75, 0xf7, 0x4b, 0x80, 0x6e, 0xbd, 0xa7, 0x99, 0xe0, 0xff, 0xfc, 0x88, 0x0e, 0x6a, 0xbb, 0xef,
	0x64, 0x5f, 0x10, 0xa6, 0xbe, 0xfa, 0x3d, 0x66, 0xf3, 0xff, 0x62, 0x9e, 0x0c, 0x97, 0x3f, 0xe3,
	0xc6, 0x72, 0x1d, 0x07, 0xab, 0x75, 0x1c, 0xfc, 0x58, 0xc7, 0xc1, 0xe7, 0x4d, 0xdc, 0x58, 0x6d,
	0xe2, 0xc6, 0xb7, 0x4d, 0xdc, 0xf8, 0xf0, 0xf4, 0xf2, 0x79, 0x7e, 0x23, 0x7a, 0x05, 0x98, 0xb9,
	0x54, 0xd3, 0x73, 0x21, 0x99, 0x3d, 0x49, 0x16, 0xdb, 0x6d, 0xb2, 0x77, 0x8c, 0xda, 0x76, 0x2d,
	0x1e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x0f, 0x84, 0x78, 0x6d, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptableSeconds != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.AcceptableSeconds))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AcceptTickers) > 0 {
		for iNdEx := len(m.AcceptTickers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AcceptTickers[iNdEx])
			copy(dAtA[i:], m.AcceptTickers[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.AcceptTickers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DelegateAccounts) > 0 {
		for iNdEx := len(m.DelegateAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegateAccounts[iNdEx])
			copy(dAtA[i:], m.DelegateAccounts[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.DelegateAccounts[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WhitelistFeeders) > 0 {
		for iNdEx := len(m.WhitelistFeeders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WhitelistFeeders[iNdEx])
			copy(dAtA[i:], m.WhitelistFeeders[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.WhitelistFeeders[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RewardDistributionPeriod != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.RewardDistributionPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.RewardDistributionRate != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.RewardDistributionRate))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteMinTx != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.VoteMinTx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PriceTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceExchangeId != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.SourceExchangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidPriceTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidPriceTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidPriceTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceExchangeId != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.SourceExchangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteMinTx != 0 {
		n += 1 + sovOracle(uint64(m.VoteMinTx))
	}
	if m.RewardDistributionRate != 0 {
		n += 1 + sovOracle(uint64(m.RewardDistributionRate))
	}
	if m.RewardDistributionPeriod != 0 {
		n += 1 + sovOracle(uint64(m.RewardDistributionPeriod))
	}
	if len(m.WhitelistFeeders) > 0 {
		for _, s := range m.WhitelistFeeders {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.DelegateAccounts) > 0 {
		for _, s := range m.DelegateAccounts {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.AcceptTickers) > 0 {
		for _, s := range m.AcceptTickers {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.AcceptableSeconds != 0 {
		n += 1 + sovOracle(uint64(m.AcceptableSeconds))
	}
	return n
}

func (m *PriceTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceExchangeId != 0 {
		n += 1 + sovOracle(uint64(m.SourceExchangeId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovOracle(uint64(m.Timestamp))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *ValidPriceTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceExchangeId != 0 {
		n += 1 + sovOracle(uint64(m.SourceExchangeId))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteMinTx", wireType)
			}
			m.VoteMinTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteMinTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDistributionRate", wireType)
			}
			m.RewardDistributionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDistributionRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDistributionPeriod", wireType)
			}
			m.RewardDistributionPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDistributionPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistFeeders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistFeeders = append(m.WhitelistFeeders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateAccounts = append(m.DelegateAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptTickers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptTickers = append(m.AcceptTickers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptableSeconds", wireType)
			}
			m.AcceptableSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptableSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceExchangeId", wireType)
			}
			m.SourceExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceExchangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidPriceTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidPriceTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidPriceTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceExchangeId", wireType)
			}
			m.SourceExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceExchangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
