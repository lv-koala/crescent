// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/oracle/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the oracle module's genesis state.
type GenesisState struct {
	Params        Params        `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	MissCounters  []MissCounter `protobuf:"bytes,3,rep,name=miss_counters,json=missCounters,proto3" json:"miss_counters"`
	PricePrevotes PricePrevotes `protobuf:"bytes,4,rep,name=price_prevotes,json=pricePrevotes,proto3,castrepeated=PricePrevotes" json:"price_prevotes"`
	PriceVotes    PriceVotes    `protobuf:"bytes,5,rep,name=price_votes,json=priceVotes,proto3,castrepeated=PriceVotes" json:"price_votes"`
	PriceOracle   OraclePrices  `protobuf:"bytes,6,rep,name=price_oracle,json=priceOracle,proto3,castrepeated=OraclePrices" json:"price_oracle"`
	LsvFeeder     LsvFeeders    `protobuf:"bytes,7,rep,name=lsv_feeder,json=lsvFeeder,proto3,castrepeated=LsvFeeders" json:"lsv_feeder"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

// MissCounter defines an miss counter and validator address pair used in
// oracle module's genesis state
type MissCounter struct {
	Feeder      string `protobuf:"bytes,1,opt,name=feeder,proto3" json:"feeder,omitempty"`
	MissCounter uint64 `protobuf:"varint,2,opt,name=miss_counter,json=missCounter,proto3" json:"miss_counter,omitempty"`
}

func (m *MissCounter) Reset()         { *m = MissCounter{} }
func (m *MissCounter) String() string { return proto.CompactTextString(m) }
func (*MissCounter) ProtoMessage()    {}
func (*MissCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{1}
}
func (m *MissCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissCounter.Merge(m, src)
}
func (m *MissCounter) XXX_Size() int {
	return m.Size()
}
func (m *MissCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_MissCounter.DiscardUnknown(m)
}

var xxx_messageInfo_MissCounter proto.InternalMessageInfo

// Price is an instance of a price "stamp"
// block_num is the block number of the block in which the price was prevoted
type OraclePrice struct {
	BlockNum int64                                  `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Ticker   string                                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	UsdPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=usd_price,json=usdPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"usd_price"`
}

func (m *OraclePrice) Reset()         { *m = OraclePrice{} }
func (m *OraclePrice) String() string { return proto.CompactTextString(m) }
func (*OraclePrice) ProtoMessage()    {}
func (*OraclePrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{2}
}
func (m *OraclePrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OraclePrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OraclePrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OraclePrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OraclePrice.Merge(m, src)
}
func (m *OraclePrice) XXX_Size() int {
	return m.Size()
}
func (m *OraclePrice) XXX_DiscardUnknown() {
	xxx_messageInfo_OraclePrice.DiscardUnknown(m)
}

var xxx_messageInfo_OraclePrice proto.InternalMessageInfo

type PricePrevote struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Feeder string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PricePrevote) Reset()         { *m = PricePrevote{} }
func (m *PricePrevote) String() string { return proto.CompactTextString(m) }
func (*PricePrevote) ProtoMessage()    {}
func (*PricePrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{3}
}
func (m *PricePrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PricePrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PricePrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PricePrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PricePrevote.Merge(m, src)
}
func (m *PricePrevote) XXX_Size() int {
	return m.Size()
}
func (m *PricePrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_PricePrevote.DiscardUnknown(m)
}

var xxx_messageInfo_PricePrevote proto.InternalMessageInfo

type PriceVote struct {
	Height          int64       `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ValidTupleCount uint64      `protobuf:"varint,2,opt,name=valid_tuple_count,json=validTupleCount,proto3" json:"valid_tuple_count,omitempty"`
	Salt            string      `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	Feeder          string      `protobuf:"bytes,4,opt,name=feeder,proto3" json:"feeder,omitempty"`
	PriceTuple      PriceTuples `protobuf:"bytes,5,rep,name=price_tuple,json=priceTuple,proto3,castrepeated=PriceTuples" json:"price_tuple"`
}

func (m *PriceVote) Reset()         { *m = PriceVote{} }
func (m *PriceVote) String() string { return proto.CompactTextString(m) }
func (*PriceVote) ProtoMessage()    {}
func (*PriceVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{4}
}
func (m *PriceVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceVote.Merge(m, src)
}
func (m *PriceVote) XXX_Size() int {
	return m.Size()
}
func (m *PriceVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceVote.DiscardUnknown(m)
}

var xxx_messageInfo_PriceVote proto.InternalMessageInfo

type ValidVotes struct {
	Height          int64            `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ValidTupleCount int64            `protobuf:"varint,2,opt,name=valid_tuple_count,json=validTupleCount,proto3" json:"valid_tuple_count,omitempty"`
	ValidTuple      ValidPriceTuples `protobuf:"bytes,3,rep,name=valid_tuple,json=validTuple,proto3,castrepeated=ValidPriceTuples" json:"valid_tuple"`
}

func (m *ValidVotes) Reset()         { *m = ValidVotes{} }
func (m *ValidVotes) String() string { return proto.CompactTextString(m) }
func (*ValidVotes) ProtoMessage()    {}
func (*ValidVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{5}
}
func (m *ValidVotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidVotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidVotes.Merge(m, src)
}
func (m *ValidVotes) XXX_Size() int {
	return m.Size()
}
func (m *ValidVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidVotes.DiscardUnknown(m)
}

var xxx_messageInfo_ValidVotes proto.InternalMessageInfo

type LsvFeeder struct {
	LsvAddr      string `protobuf:"bytes,1,opt,name=lsv_addr,json=lsvAddr,proto3" json:"lsv_addr,omitempty"`
	FeederAddr   string `protobuf:"bytes,2,opt,name=feeder_addr,json=feederAddr,proto3" json:"feeder_addr,omitempty"`
	UpdateHeight int64  `protobuf:"varint,3,opt,name=update_height,json=updateHeight,proto3" json:"update_height,omitempty"`
}

func (m *LsvFeeder) Reset()         { *m = LsvFeeder{} }
func (m *LsvFeeder) String() string { return proto.CompactTextString(m) }
func (*LsvFeeder) ProtoMessage()    {}
func (*LsvFeeder) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27311736b8cb813, []int{6}
}
func (m *LsvFeeder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LsvFeeder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LsvFeeder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LsvFeeder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsvFeeder.Merge(m, src)
}
func (m *LsvFeeder) XXX_Size() int {
	return m.Size()
}
func (m *LsvFeeder) XXX_DiscardUnknown() {
	xxx_messageInfo_LsvFeeder.DiscardUnknown(m)
}

var xxx_messageInfo_LsvFeeder proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "crescent.oracle.v1beta1.GenesisState")
	proto.RegisterType((*MissCounter)(nil), "crescent.oracle.v1beta1.MissCounter")
	proto.RegisterType((*OraclePrice)(nil), "crescent.oracle.v1beta1.OraclePrice")
	proto.RegisterType((*PricePrevote)(nil), "crescent.oracle.v1beta1.PricePrevote")
	proto.RegisterType((*PriceVote)(nil), "crescent.oracle.v1beta1.PriceVote")
	proto.RegisterType((*ValidVotes)(nil), "crescent.oracle.v1beta1.ValidVotes")
	proto.RegisterType((*LsvFeeder)(nil), "crescent.oracle.v1beta1.LsvFeeder")
}

func init() {
	proto.RegisterFile("crescent/oracle/v1beta1/genesis.proto", fileDescriptor_e27311736b8cb813)
}

var fileDescriptor_e27311736b8cb813 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x9b, 0x7c, 0x69, 0x7d, 0x9d, 0x7c, 0x3f, 0xf3, 0x95, 0x62, 0x8a, 0x94, 0x14, 0xb7,
	0x45, 0x11, 0x52, 0x6d, 0xb5, 0x08, 0x76, 0x2c, 0x08, 0x08, 0x2a, 0xf1, 0xd3, 0x6a, 0x28, 0x45,
	0x20, 0x21, 0xcb, 0xb1, 0x87, 0xc4, 0x8a, 0x1d, 0x5b, 0x9e, 0xb1, 0x81, 0xa7, 0x00, 0xf1, 0x18,
	0xec, 0x79, 0x87, 0x2e, 0xbb, 0x42, 0x88, 0x45, 0x81, 0xf6, 0x45, 0x90, 0x67, 0x26, 0xc9, 0x14,
	0x94, 0x56, 0xac, 0x32, 0xf7, 0xcc, 0xf1, 0xb9, 0xe7, 0xce, 0x9c, 0x0c, 0xac, 0xfb, 0x19, 0xa1,
	0x3e, 0x19, 0x31, 0x27, 0xc9, 0x3c, 0x3f, 0x22, 0x4e, 0xb1, 0xd9, 0x23, 0xcc, 0xdb, 0x74, 0xfa,
	0x64, 0x44, 0x68, 0x48, 0xed, 0x34, 0x4b, 0x58, 0x82, 0x2e, 0x8e, 0x69, 0xb6, 0xa0, 0xd9, 0x92,
	0xb6, 0xbc, 0xd8, 0x4f, 0xfa, 0x09, 0xe7, 0x38, 0xe5, 0x4a, 0xd0, 0x97, 0xd7, 0x66, 0xa9, 0xca,
	0xaf, 0x39, 0xcb, 0xfa, 0x50, 0x83, 0xc6, 0x7d, 0xd1, 0xe6, 0x09, 0xf3, 0x18, 0x41, 0xb7, 0xa0,
	0x9e, 0x7a, 0x99, 0x17, 0x53, 0x53, 0x5b, 0xd1, 0x3a, 0xc6, 0x56, 0xdb, 0x9e, 0xd1, 0xd6, 0xde,
	0xe5, 0xb4, 0x6e, 0xed, 0xe0, 0xa8, 0x5d, 0xc1, 0xf2, 0x23, 0xb4, 0x03, 0xcd, 0x38, 0xa4, 0xd4,
	0xf5, 0x93, 0x7c, 0xc4, 0x48, 0x46, 0xcd, 0xea, 0x4a, 0xb5, 0x63, 0x6c, 0xad, 0xcd, 0x54, 0x79,
	0x14, 0x52, 0x7a, 0x47, 0x90, 0xa5, 0x54, 0x23, 0x9e, 0x42, 0x14, 0xf9, 0xf0, 0x77, 0x9a, 0x85,
	0x3e, 0x71, 0xd3, 0x8c, 0x14, 0x09, 0x23, 0xd4, 0xac, 0x71, 0xc5, 0xf5, 0xd9, 0xbe, 0x4a, 0xfa,
	0xae, 0x60, 0x77, 0x2f, 0x94, 0x92, 0x1f, 0xbf, 0xb5, 0x9b, 0x2a, 0x4a, 0x71, 0x33, 0x55, 0x4b,
	0xf4, 0x0c, 0x0c, 0xd1, 0x44, 0x74, 0xf8, 0x8b, 0x77, 0xb0, 0xce, 0xee, 0xb0, 0x5f, 0xca, 0x23,
	0x29, 0x0f, 0x13, 0x88, 0x62, 0x48, 0x27, 0x6b, 0xf4, 0x12, 0x1a, 0x42, 0x58, 0x28, 0x98, 0xf5,
	0x73, 0x4e, 0x63, 0x87, 0x97, 0x5c, 0xac, 0xbb, 0x28, 0xb5, 0x1b, 0x0a, 0x48, 0xb1, 0x30, 0x2a,
	0x20, 0xf4, 0x14, 0x20, 0xa2, 0x85, 0xfb, 0x8a, 0x90, 0x80, 0x64, 0xe6, 0xfc, 0x39, 0xb6, 0x1f,
	0xd2, 0xe2, 0x1e, 0x67, 0x4e, 0x6d, 0x4f, 0x20, 0x8a, 0xf5, 0x68, 0xbc, 0xb6, 0xb6, 0xc1, 0x50,
	0xae, 0x05, 0x2d, 0x41, 0x5d, 0x76, 0x28, 0x23, 0xa1, 0x63, 0x59, 0xa1, 0x2b, 0xd0, 0x50, 0xef,
	0xda, 0x9c, 0x5b, 0xd1, 0x3a, 0x35, 0x6c, 0x28, 0xd7, 0x67, 0xbd, 0xd3, 0xc0, 0x50, 0xec, 0xa3,
	0xcb, 0xa0, 0xf7, 0xa2, 0xc4, 0x1f, 0xba, 0xa3, 0x3c, 0xe6, 0x6a, 0x55, 0xbc, 0xc0, 0x81, 0xc7,
	0x79, 0x5c, 0xf6, 0x61, 0xa1, 0x3f, 0x94, 0x4a, 0x3a, 0x96, 0x15, 0x7a, 0x00, 0x7a, 0x4e, 0x03,
	0x97, 0x0f, 0x6e, 0x56, 0xcb, 0xad, 0xae, 0x5d, 0x0e, 0xf0, 0xf5, 0xa8, 0x7d, 0xb5, 0x1f, 0xb2,
	0x41, 0xde, 0xb3, 0xfd, 0x24, 0x76, 0xfc, 0x84, 0xc6, 0x09, 0x95, 0x3f, 0x1b, 0x34, 0x18, 0x3a,
	0xec, 0x6d, 0x4a, 0xa8, 0x7d, 0x97, 0xf8, 0x78, 0x21, 0xa7, 0x01, 0x77, 0x60, 0x61, 0x68, 0xa8,
	0x51, 0x40, 0x08, 0x6a, 0x03, 0x8f, 0x0e, 0xe4, 0x68, 0x7c, 0xad, 0x0c, 0x3c, 0x77, 0x6a, 0xe0,
	0x25, 0xa8, 0x0f, 0x48, 0xd8, 0x1f, 0x30, 0xee, 0xa2, 0x8a, 0x65, 0x65, 0x7d, 0xd6, 0x40, 0x9f,
	0x04, 0x40, 0x61, 0x69, 0x2a, 0x0b, 0x5d, 0x83, 0xff, 0x0a, 0x2f, 0x0a, 0x03, 0x97, 0xe5, 0x69,
	0x44, 0xc4, 0xa9, 0xc9, 0x33, 0xfb, 0x87, 0x6f, 0xec, 0x95, 0x38, 0x3f, 0xb9, 0xd2, 0x15, 0xf5,
	0x22, 0xd1, 0x47, 0xc7, 0x7c, 0xad, 0xb8, 0xaa, 0x9d, 0x72, 0xf5, 0x7c, 0x1c, 0x5e, 0xae, 0x2b,
	0xc3, 0xbb, 0x7a, 0x76, 0x78, 0x79, 0xab, 0xee, 0xff, 0x32, 0x06, 0xc6, 0x14, 0x1b, 0xc7, 0x97,
	0x17, 0xd6, 0x27, 0x0d, 0x60, 0xbf, 0xb4, 0x26, 0xd2, 0xfc, 0xc7, 0x93, 0x55, 0x7f, 0x9f, 0xcc,
	0x07, 0x43, 0xe1, 0xca, 0xe7, 0xa1, 0x33, 0xd3, 0x2d, 0xef, 0xae, 0x58, 0x36, 0xa5, 0xe5, 0x7f,
	0x7f, 0xd9, 0xa0, 0x18, 0xa6, 0x9d, 0xac, 0x08, 0xf4, 0x49, 0xb2, 0xd1, 0x25, 0x58, 0x28, 0xff,
	0x24, 0x5e, 0x10, 0x8c, 0x03, 0x3c, 0x1f, 0xd1, 0xe2, 0x76, 0x10, 0x64, 0xa8, 0x0d, 0x86, 0x38,
	0x44, 0xb1, 0x2b, 0x6e, 0x1b, 0x04, 0xc4, 0x09, 0xab, 0xd0, 0xcc, 0xd3, 0xc0, 0x63, 0xc4, 0x3d,
	0x75, 0xf1, 0x0d, 0x01, 0x6e, 0x73, 0xac, 0xbb, 0x77, 0xf0, 0xa3, 0x55, 0x39, 0x38, 0x6e, 0x69,
	0x87, 0xc7, 0x2d, 0xed, 0xfb, 0x71, 0x4b, 0x7b, 0x7f, 0xd2, 0xaa, 0x1c, 0x9e, 0xb4, 0x2a, 0x5f,
	0x4e, 0x5a, 0x95, 0x17, 0x37, 0xd5, 0x88, 0xca, 0x29, 0x37, 0x46, 0x84, 0xbd, 0x4e, 0xb2, 0xe1,
	0x04, 0x70, 0x8a, 0x1b, 0xce, 0x9b, 0xf1, 0x43, 0xcd, 0x63, 0xdb, 0xab, 0xf3, 0x07, 0xfa, 0xfa,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x8e, 0x64, 0xc5, 0x1e, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LsvFeeder) > 0 {
		for iNdEx := len(m.LsvFeeder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LsvFeeder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PriceOracle) > 0 {
		for iNdEx := len(m.PriceOracle) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceOracle[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PriceVotes) > 0 {
		for iNdEx := len(m.PriceVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PricePrevotes) > 0 {
		for iNdEx := len(m.PricePrevotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PricePrevotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MissCounters) > 0 {
		for iNdEx := len(m.MissCounters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MissCounters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MissCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissCounter != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MissCounter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OraclePrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OraclePrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OraclePrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdPrice.Size()
		i -= size
		if _, err := m.UsdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockNum != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PricePrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PricePrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PricePrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceTuple) > 0 {
		for iNdEx := len(m.PriceTuple) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceTuple[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidTupleCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidTupleCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidVotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidVotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidVotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidTuple) > 0 {
		for iNdEx := len(m.ValidTuple) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidTuple[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ValidTupleCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidTupleCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LsvFeeder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LsvFeeder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LsvFeeder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UpdateHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FeederAddr) > 0 {
		i -= len(m.FeederAddr)
		copy(dAtA[i:], m.FeederAddr)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeederAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LsvAddr) > 0 {
		i -= len(m.LsvAddr)
		copy(dAtA[i:], m.LsvAddr)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LsvAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.MissCounters) > 0 {
		for _, e := range m.MissCounters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PricePrevotes) > 0 {
		for _, e := range m.PricePrevotes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PriceVotes) > 0 {
		for _, e := range m.PriceVotes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PriceOracle) > 0 {
		for _, e := range m.PriceOracle {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LsvFeeder) > 0 {
		for _, e := range m.LsvFeeder {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *MissCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.MissCounter != 0 {
		n += 1 + sovGenesis(uint64(m.MissCounter))
	}
	return n
}

func (m *OraclePrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNum != 0 {
		n += 1 + sovGenesis(uint64(m.BlockNum))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.UsdPrice.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PricePrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func (m *PriceVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	if m.ValidTupleCount != 0 {
		n += 1 + sovGenesis(uint64(m.ValidTupleCount))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.PriceTuple) > 0 {
		for _, e := range m.PriceTuple {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ValidVotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	if m.ValidTupleCount != 0 {
		n += 1 + sovGenesis(uint64(m.ValidTupleCount))
	}
	if len(m.ValidTuple) > 0 {
		for _, e := range m.ValidTuple {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *LsvFeeder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LsvAddr)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.FeederAddr)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.UpdateHeight != 0 {
		n += 1 + sovGenesis(uint64(m.UpdateHeight))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissCounters = append(m.MissCounters, MissCounter{})
			if err := m.MissCounters[len(m.MissCounters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePrevotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricePrevotes = append(m.PricePrevotes, PricePrevote{})
			if err := m.PricePrevotes[len(m.PricePrevotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceVotes = append(m.PriceVotes, PriceVote{})
			if err := m.PriceVotes[len(m.PriceVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceOracle = append(m.PriceOracle, OraclePrice{})
			if err := m.PriceOracle[len(m.PriceOracle)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsvFeeder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LsvFeeder = append(m.LsvFeeder, LsvFeeder{})
			if err := m.LsvFeeder[len(m.LsvFeeder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OraclePrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OraclePrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OraclePrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PricePrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PricePrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PricePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTupleCount", wireType)
			}
			m.ValidTupleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidTupleCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTuple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceTuple = append(m.PriceTuple, PriceTuple{})
			if err := m.PriceTuple[len(m.PriceTuple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidVotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidVotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidVotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTupleCount", wireType)
			}
			m.ValidTupleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidTupleCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTuple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidTuple = append(m.ValidTuple, ValidPriceTuple{})
			if err := m.ValidTuple[len(m.ValidTuple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LsvFeeder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LsvFeeder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LsvFeeder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsvAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LsvAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeederAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeederAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeight", wireType)
			}
			m.UpdateHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
